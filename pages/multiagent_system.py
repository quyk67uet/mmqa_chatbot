import streamlit as st
import os
from supabase import create_client, Client
from datetime import datetime
import json

# Thi·∫øt l·∫≠p page config
st.set_page_config(
    page_title="Multi-Agent System - Gia s∆∞ To√°n AI",
    page_icon="ü§ñ",
    layout="wide"
)

def init_supabase_client() -> Client:
    """
    Kh·ªüi t·∫°o Supabase client
    """
    url = os.getenv("SUPABASE_URL")
    key = os.getenv("SUPABASE_KEY")
    
    if not url or not key:
        st.error("Kh√¥ng t√¨m th·∫•y SUPABASE_URL ho·∫∑c SUPABASE_KEY trong file .env")
        st.stop()
    
    return create_client(url, key)

def display_system_architecture():
    """
    Hi·ªÉn th·ªã ki·∫øn tr√∫c h·ªá th·ªëng
    """
    st.markdown("""
    <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: 2rem; 
                border-radius: 15px; 
                margin-bottom: 2rem;
                text-align: center;'>
        <h1 style='color: white; margin-bottom: 1rem; font-size: 2.5rem;'>
            ü§ñ An Adaptive Multi-Agent Tutoring System
        </h1>
        <p style='color: #f0f0f0; font-size: 1.2rem; margin-bottom: 0;'>
            H·ªá th·ªëng gia s∆∞ th√¥ng minh v·ªõi ki·∫øn tr√∫c ƒëa t√°c nh√¢n th√≠ch ·ª©ng
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Placeholder cho h√¨nh ·∫£nh system architecture
    st.markdown("### üìä Ki·∫øn tr√∫c H·ªá th·ªëng")
    
    # Container cho h√¨nh ·∫£nh v·ªõi styling ƒë·∫πp
    with st.container():
        col1, col2, col3 = st.columns([1, 3, 1])
        with col2:
            st.image("images/system.jpg", use_container_width=True)

def display_agents():
    """
    Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng Agent v·ªõi giao di·ªán ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a
    """
    # Header section
    st.markdown("""
    <div style="margin: 3rem 0 2rem 0;">
        <h2 style="text-align: center; color: #333; margin-bottom: 0.5rem; font-size: 2.5rem;">
            ü§ñ Chi ti·∫øt c√°c AI Agents
        </h2>
        <p style="text-align: center; color: #666; font-size: 1.1rem; margin-bottom: 2rem;">
            Kh√°m ph√° h·ªá sinh th√°i AI agents th√¥ng minh v√† chuy√™n bi·ªát
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # CSS ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a - lo·∫°i b·ªè c√°c effect ph·ª©c t·∫°p
    st.markdown("""
    <style>
    .agent-container {
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
        overflow: hidden;
        border: 1px solid rgba(0,0,0,0.05);
    }
    
    .agent-header {
        padding: 2rem;
        color: white;
    }
    
    .agent-title {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
        font-size: 1.8rem;
        font-weight: 600;
    }
    
    .agent-title-icon {
        font-size: 2.5rem;
        margin-right: 1rem;
    }
    
    .agent-role {
        background: rgba(255,255,255,0.2);
        padding: 1rem;
        border-radius: 10px;
        font-size: 1.1rem;
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .agent-body {
        padding: 2rem;
        background: #fafafa;
    }
    
    .agent-features {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        border: 1px solid rgba(0,0,0,0.05);
    }
    
    .features-title {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
        font-size: 1.3rem;
        font-weight: 600;
        color: #333;
    }
    
    .features-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    .feature-item {
        padding: 0.8rem 0;
        border-bottom: 1px solid rgba(0,0,0,0.05);
        display: flex;
        align-items: flex-start;
    }
    
    .feature-item:last-child {
        border-bottom: none;
    }
    
    .feature-bullet {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 1rem;
        margin-top: 0.5rem;
        flex-shrink: 0;
    }
    
    .feature-text {
        flex: 1;
        line-height: 1.6;
    }
    
    .feature-name {
        font-weight: 600;
        margin-right: 0.5rem;
    }
    
    .image-placeholder {
        background: rgba(255,255,255,0.9);
        border: 2px dashed #ddd;
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        height: 250px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    
    .placeholder-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.7;
    }
    
    .placeholder-text {
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #333;
    }
    
    .placeholder-path {
        font-size: 0.9rem;
        color: #666;
        font-family: monospace;
        background: rgba(0,0,0,0.05);
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # ƒê·ªãnh nghƒ©a th√¥ng tin c√°c agents
    agents = [
        {
            "number": "1",
            "name": "Informer Agent",
            "icon": "üß†",
            "gradient": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
            "color": "#667eea",
            "role": "Chuy√™n gia gi·∫£i to√°n v·ªõi kh·∫£ nƒÉng truy xu·∫•t th√¥ng tin th√¥ng minh",
            "image": "images/informer_agent.png",
            "features": [
                "RAG Pipeline: S·ª≠ d·ª•ng Retrieval-Augmented Generation ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin t·ª´ s√°ch gi√°o khoa",
                "Embedding Search: T√¨m ki·∫øm ng·ªØ nghƒ©a th√¥ng minh v·ªõi Vietnamese bi-encoder",
                "Detailed Solutions: Sinh l·ªùi gi·∫£i chi ti·∫øt, t·ª´ng b∆∞·ªõc d·ªÖ hi·ªÉu",
                "Context Awareness: Hi·ªÉu ng·ªØ c·∫£nh c√¢u h·ªèi ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ph√π h·ª£p"
            ]
        },
        {
            "number": "2",
            "name": "Practice Agent",
            "icon": "üìù",
            "gradient": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)",
            "color": "#f093fb",
            "role": "Chuy√™n gia t·∫°o b√†i t·∫≠p v√† ƒë·ªÅ xu·∫•t t√†i li·ªáu h·ªçc t·∫≠p",
            "image": "images/practice_agent.png",
            "features": [
                "Exercise Generation: T·∫°o b√†i t·∫≠p m·ªõi ph√π h·ª£p v·ªõi ƒëi·ªÉm y·∫øu c·ªßa h·ªçc sinh",
                "Video Recommendation: ƒê·ªÅ xu·∫•t video h·ªçc t·∫≠p t·ª´ knowledge base",
                "Adaptive Difficulty: ƒêi·ªÅu ch·ªânh ƒë·ªô kh√≥ b√†i t·∫≠p theo tr√¨nh ƒë·ªô",
                "Creative Problems: So·∫°n c√¢u h·ªèi s√°ng t·∫°o, kh√¥ng c√≥ trong s√°ch"
            ]
        },
        {
            "number": "3",
            "name": "Insight Agent",
            "icon": "üîç",
            "gradient": "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)",
            "color": "#4facfe",
            "role": "Chuy√™n gia ph√¢n t√≠ch t√¢m l√Ω v√† h·ªçc t·∫≠p c·ªßa h·ªçc sinh",
            "image": "images/insight_agent.png",
            "features": [
                "Weakness Analysis: Ph√¢n t√≠ch ƒëi·ªÉm y·∫øu t·ª´ l·ªãch s·ª≠ h·ªôi tho·∫°i",
                "Sentiment Detection: Nh·∫≠n di·ªán c·∫£m x√∫c v√† t√¢m tr·∫°ng h·ªçc sinh",
                "Learning Pattern: Ph√°t hi·ªán patterns trong c√°ch h·ªçc c·ªßa h·ªçc sinh",
                "Personalized Insights: ƒê∆∞a ra nh·ªØng insight c√° nh√¢n h√≥a"
            ]
        },
        {
            "number": "4",
            "name": "Verifier Agent",
            "icon": "‚úÖ",
            "gradient": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)",
            "color": "#a8edea",
            "role": "Chuy√™n gia ki·ªÉm tra ch·∫•t l∆∞·ª£ng v√† t√≠nh ch√≠nh x√°c",
            "image": "images/verifier_agent.png",
            "features": [
                "Solution Verification: Ki·ªÉm tra t√≠nh ƒë√∫ng ƒë·∫Øn c·ªßa l·ªùi gi·∫£i",
                "Error Detection: Ph√°t hi·ªán v√† ch·ªâ ra l·ªói sai",
                "Quality Assurance: ƒê·∫£m b·∫£o ch·∫•t l∆∞·ª£ng c√¢u tr·∫£ l·ªùi",
                "Correction Suggestions: ƒê∆∞a ra g·ª£i √Ω s·ª≠a l·ªói"
            ]
        },
        {
            "number": "5",
            "name": "Tutor Agent (Orchestrator)",
            "icon": "üéØ",
            "gradient": "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)",
            "color": "#fcb69f",
            "role": "Trung t√¢m ƒëi·ªÅu ph·ªëi v√† qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng",
            "image": "images/tutor_agent.png",
            "features": [
                "Intent Classification: Ph√¢n lo·∫°i √Ω ƒë·ªãnh ng∆∞·ªùi d√πng (greeting, math_question, practice, stress, etc.)",
                "Agent Orchestration: ƒêi·ªÅu ph·ªëi c√°c agent kh√°c theo lu·ªìng ph√π h·ª£p",
                "Conversation Management: Qu·∫£n l√Ω b·ªëi c·∫£nh v√† lu·ªìng h·ªôi tho·∫°i",
                "Proactive Learning: Ch·ªß ƒë·ªông ƒë·ªÅ xu·∫•t b√†i t·∫≠p khi ph√°t hi·ªán c∆° h·ªôi",
                "Emotional Support: H·ªó tr·ª£ t√¢m l√Ω khi h·ªçc sinh g·∫∑p kh√≥ khƒÉn"
            ]
        }
    ]
    
    # Hi·ªÉn th·ªã t·ª´ng agent
    for i, agent in enumerate(agents):
        # Container ch√≠nh
        st.markdown(f"""
        <div class="agent-container">
            <div class="agent-header" style="background: {agent['gradient']};">
                <div class="agent-title">
                    <span class="agent-title-icon">{agent['icon']}</span>
                    <span>Agent {agent['number']}: {agent['name']}</span>
                </div>
                <div class="agent-role">
                    <strong>Vai tr√≤:</strong> {agent['role']}
                </div>
            </div>
        """, unsafe_allow_html=True)
        
        # Body v·ªõi layout 2 c·ªôt
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"""
            <div class="agent-body">
                <div class="agent-features">
                    <div class="features-title">
                        <span style="margin-right: 0.5rem;">üîß</span>
                        <span>Ch·ª©c nƒÉng ch√≠nh</span>
                    </div>
                    <ul class="features-list">
            """, unsafe_allow_html=True)
            
            for feature in agent['features']:
                parts = feature.split(': ', 1)
                if len(parts) == 2:
                    st.markdown(f"""
                    <li class="feature-item">
                        <div class="feature-bullet" style="background: {agent['color']};"></div>
                        <div class="feature-text">
                            <span class="feature-name" style="color: {agent['color']};">{parts[0]}:</span>
                            <span>{parts[1]}</span>
                        </div>
                    </li>
                    """, unsafe_allow_html=True)
                else:
                    st.markdown(f"""
                    <li class="feature-item">
                        <div class="feature-bullet" style="background: {agent['color']};"></div>
                        <div class="feature-text">{feature}</div>
                    </li>
                    """, unsafe_allow_html=True)
            
            st.markdown("""
                    </ul>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            try:
                st.image(agent['image'], use_container_width=True, caption=f"Agent {agent['number']}: {agent['name']}")
            except:
                st.markdown(f"""
                <div class="agent-body">
                    <div class="image-placeholder">
                        <div class="placeholder-icon" style="color: {agent['color']};">{agent['icon']}</div>
                        <div class="placeholder-text">Agent {agent['number']} Image</div>
                        <div class="placeholder-path">{agent['image']}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
        
        # ƒê√≥ng container
        st.markdown("</div>", unsafe_allow_html=True)
        
        # Spacing gi·ªØa c√°c agents
        if i < len(agents) - 1:
            st.markdown("<div style='margin: 2rem 0;'></div>", unsafe_allow_html=True)

def display_system_components():
    """
    Hi·ªÉn th·ªã c√°c th√†nh ph·∫ßn c·ªßa h·ªá th·ªëng
    """
    st.markdown("## üèóÔ∏è C√°c Th√†nh ph·∫ßn H·ªá th·ªëng")
    
    # Orchestration Hub
    with st.container():
        st.markdown("""
        <div style='background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%); 
                    padding: 1.5rem; 
                    border-radius: 10px; 
                    margin-bottom: 1rem;'>
            <h3 style='color: white; margin-bottom: 0.5rem;'>
                üéØ Orchestration Hub
            </h3>
            <p style='color: #f0f0f0; margin-bottom: 0;'>
                Trung t√¢m ƒëi·ªÅu ph·ªëi v√† qu·∫£n l√Ω t·∫•t c·∫£ c√°c t√°c nh√¢n trong h·ªá th·ªëng
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # Hai flows ch√≠nh
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%); 
                    padding: 1.5rem; 
                    border-radius: 10px; 
                    margin-bottom: 1rem;'>
            <h3 style='color: #8B0000; margin-bottom: 1rem;'>
                üìù Flow A: Problem-Solving
            </h3>
            <div style='background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 8px;'>
                <h4 style='color: #8B0000; margin-bottom: 0.5rem;'>RAG & Verification</h4>
                <ul style='color: #2F4F4F; margin-bottom: 0;'>
                    <li>X·ª≠ l√Ω truy v·∫•n RAG</li>
                    <li>Gi·∫£i quy·∫øt y√™u c·∫ßu</li>
                    <li>X√°c th·ª±c v√† so·∫°n th·∫£o</li>
                    <li>Cung c·∫•p c√¢u tr·∫£ l·ªùi cu·ªëi c√πng</li>
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style='background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); 
                    padding: 1.5rem; 
                    border-radius: 10px; 
                    margin-bottom: 1rem;'>
            <h3 style='color: #2F4F4F; margin-bottom: 1rem;'>
                üéØ Flow B: Personalization
            </h3>
            <div style='background: rgba(255,255,255,0.2); padding: 1rem; border-radius: 8px;'>
                <h4 style='color: #2F4F4F; margin-bottom: 0.5rem;'>Learning Engine</h4>
                <ul style='color: #2F4F4F; margin-bottom: 0;'>
                    <li>Ph√¢n t√≠ch th√¥ng tin ng∆∞·ªùi d√πng</li>
                    <li>G·ª≠i ch·ªß ƒë·ªÅ ph√π h·ª£p</li>
                    <li>Truy v·∫•n d·ªØ li·ªáu</li>
                    <li>T·∫°o b√†i t·∫≠p c√° nh√¢n h√≥a</li>
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)

def display_workflow_details():
    """
    Hi·ªÉn th·ªã chi ti·∫øt quy tr√¨nh l√†m vi·ªác - ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a
    """
    st.markdown("## üîÑ Quy tr√¨nh Ho·∫°t ƒë·ªông")
    
    # Workflow steps
    workflow_steps = [
        {
            "step": "1",
            "title": "Nh·∫≠n c√¢u h·ªèi t·ª´ h·ªçc sinh",
            "description": "H·ªá th·ªëng nh·∫≠n v√† ph√¢n t√≠ch c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng",
            "icon": "‚ùì",
            "color": "#FF6B6B"
        },
        {
            "step": "2", 
            "title": "Orchestration Hub ph√¢n t√≠ch",
            "description": "Trung t√¢m ƒëi·ªÅu ph·ªëi quy·∫øt ƒë·ªãnh lu·ªìng x·ª≠ l√Ω ph√π h·ª£p",
            "icon": "üéØ",
            "color": "#4ECDC4"
        },
        {
            "step": "3",
            "title": "X·ª≠ l√Ω song song",
            "description": "Flow A gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ, Flow B c√° nh√¢n h√≥a tr·∫£i nghi·ªám",
            "icon": "‚ö°",
            "color": "#45B7D1"
        },
        {
            "step": "4",
            "title": "C·∫≠p nh·∫≠t h·ªì s∆° h·ªçc sinh",
            "description": "H·ªá th·ªëng c·∫≠p nh·∫≠t th√¥ng tin h·ªçc t·∫≠p v√† ƒëi·ªÉm y·∫øu",
            "icon": "üìä",
            "color": "#96CEB4"
        },
        {
            "step": "5",
            "title": "Tr·∫£ l·ªùi cu·ªëi c√πng",
            "description": "Cung c·∫•p c√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c x√°c th·ª±c v√† c√° nh√¢n h√≥a",
            "icon": "‚úÖ",
            "color": "#FECA57"
        }
    ]
    
    for i, step in enumerate(workflow_steps):
        # T·∫°o layout cho t·ª´ng b∆∞·ªõc
        col1, col2 = st.columns([1, 4])
        
        with col1:
            st.markdown(f"""
            <div style='width: 70px; 
                        height: 70px; 
                        background: {step['color']}; 
                        border-radius: 50%; 
                        display: flex; 
                        align-items: center; 
                        justify-content: center; 
                        margin: 0 auto;'>
                <span style='font-size: 1.8rem;'>{step['icon']}</span>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div style='background: {step['color']}20; 
                        padding: 1rem; 
                        border-radius: 10px; 
                        margin-bottom: 1rem;
                        border-left: 4px solid {step['color']};'>
                <h4 style='color: #333; margin-bottom: 0.5rem;'>
                    B∆∞·ªõc {step['step']}: {step['title']}
                </h4>
                <p style='color: #666; margin-bottom: 0;'>
                    {step['description']}
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        # Th√™m m≈©i t√™n gi·ªØa c√°c b∆∞·ªõc (tr·ª´ b∆∞·ªõc cu·ªëi)
        if i < len(workflow_steps) - 1:
            st.markdown("""
            <div style='text-align: center; margin: 1rem 0;'>
                <span style='font-size: 1.5rem; color: #ccc;'>‚¨áÔ∏è</span>
            </div>
            """, unsafe_allow_html=True)

def display_technical_features():
    """
    Hi·ªÉn th·ªã c√°c t√≠nh nƒÉng k·ªπ thu·∫≠t
    """
    st.markdown("## üõ†Ô∏è T√≠nh nƒÉng K·ªπ thu·∫≠t")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    padding: 1.5rem; 
                    border-radius: 10px; 
                    margin-bottom: 1rem;'>
            <h4 style='color: white; margin-bottom: 1rem;'>
                üîç RAG (Retrieval-Augmented Generation)
            </h4>
            <ul style='color: #f0f0f0; margin-bottom: 0;'>
                <li>Truy xu·∫•t th√¥ng tin t·ª´ c∆° s·ªü d·ªØ li·ªáu</li>
                <li>TƒÉng c∆∞·ªùng kh·∫£ nƒÉng sinh text</li>
                <li>ƒê·∫£m b·∫£o t√≠nh ch√≠nh x√°c cao</li>
                <li>X√°c th·ª±c c√¢u tr·∫£ l·ªùi</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); 
                    padding: 1.5rem; 
                    border-radius: 10px; 
                    margin-bottom: 1rem;'>
            <h4 style='color: white; margin-bottom: 1rem;'>
                üéØ Personalization Engine
            </h4>
            <ul style='color: #f0f0f0; margin-bottom: 0;'>
                <li>Ph√¢n t√≠ch ƒëi·ªÉm y·∫øu h·ªçc sinh</li>
                <li>T·∫°o b√†i t·∫≠p c√° nh√¢n h√≥a</li>
                <li>Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p</li>
                <li>ƒê·ªÅ xu·∫•t n·ªôi dung ph√π h·ª£p</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style='background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); 
                    padding: 1.5rem; 
                    border-radius: 10px; 
                    margin-bottom: 1rem;'>
            <h4 style='color: white; margin-bottom: 1rem;'>
                üß† Adaptive Learning
            </h4>
            <ul style='color: #f0f0f0; margin-bottom: 0;'>
                <li>H·ªçc th√≠ch ·ª©ng theo nƒÉng l·ª±c</li>
                <li>ƒêi·ªÅu ch·ªânh ƒë·ªô kh√≥ t·ª± ƒë·ªông</li>
                <li>Ph·∫£n h·ªìi th·ªùi gian th·ª±c</li>
                <li>T·ªëi ∆∞u h√≥a tr·∫£i nghi·ªám</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style='background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); 
                    padding: 1.5rem; 
                    border-radius: 10px; 
                    margin-bottom: 1rem;'>
            <h4 style='color: white; margin-bottom: 1rem;'>
                üìä User Profile Management
            </h4>
            <ul style='color: #f0f0f0; margin-bottom: 0;'>
                <li>L∆∞u tr·ªØ l·ªãch s·ª≠ h·ªçc t·∫≠p</li>
                <li>Ph√¢n t√≠ch pattern h·ªçc t·∫≠p</li>
                <li>C·∫≠p nh·∫≠t th√¥ng tin real-time</li>
                <li>B√°o c√°o ti·∫øn ƒë·ªô chi ti·∫øt</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

def display_benefits():
    """
    Hi·ªÉn th·ªã l·ª£i √≠ch c·ªßa h·ªá th·ªëng - ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a
    """
    st.markdown("## üåü L·ª£i √≠ch c·ªßa H·ªá th·ªëng")
    
    benefits = [
        {
            "icon": "üéØ",
            "title": "H·ªçc t·∫≠p c√° nh√¢n h√≥a",
            "description": "M·ªói h·ªçc sinh nh·∫≠n ƒë∆∞·ª£c tr·∫£i nghi·ªám h·ªçc t·∫≠p ƒë∆∞·ª£c t√πy ch·ªânh theo nhu c·∫ßu ri√™ng",
            "color": "#FF6B6B"
        },
        {
            "icon": "‚ö°",
            "title": "Ph·∫£n h·ªìi t·ª©c th√¨",
            "description": "H·ªá th·ªëng ƒëa t√°c nh√¢n cho ph√©p x·ª≠ l√Ω song song, ƒë∆∞a ra ph·∫£n h·ªìi nhanh ch√≥ng",
            "color": "#4ECDC4"
        },
        {
            "icon": "üß†",
            "title": "H·ªçc th√≠ch ·ª©ng th√¥ng minh",
            "description": "AI ph√¢n t√≠ch v√† ƒëi·ªÅu ch·ªânh ph∆∞∆°ng ph√°p d·∫°y theo ti·∫øn b·ªô c·ªßa t·ª´ng h·ªçc sinh",
            "color": "#45B7D1"
        },
        {
            "icon": "üìä",
            "title": "Theo d√µi ti·∫øn ƒë·ªô chi ti·∫øt",
            "description": "B√°o c√°o v√† ph√¢n t√≠ch ti·∫øn ƒë·ªô h·ªçc t·∫≠p gi√∫p t·ªëi ∆∞u h√≥a qu√° tr√¨nh h·ªçc",
            "color": "#96CEB4"
        },
        {
            "icon": "üîç",
            "title": "ƒê·ªô ch√≠nh x√°c cao",
            "description": "H·ªá th·ªëng RAG v√† x√°c th·ª±c ƒë·∫£m b·∫£o th√¥ng tin ch√≠nh x√°c v√† ƒë√°ng tin c·∫≠y",
            "color": "#FECA57"
        },
        {
            "icon": "üåê",
            "title": "M·ªü r·ªông d·ªÖ d√†ng",
            "description": "Ki·∫øn tr√∫c ƒëa t√°c nh√¢n cho ph√©p m·ªü r·ªông v√† th√™m t√≠nh nƒÉng m·ªõi linh ho·∫°t",
            "color": "#FF9FF3"
        }
    ]
    
    # Hi·ªÉn th·ªã benefits trong l∆∞·ªõi 2x3
    for i in range(0, len(benefits), 2):
        col1, col2 = st.columns(2)
        
        with col1:
            if i < len(benefits):
                benefit = benefits[i]
                st.markdown(f"""
                <div style='background: {benefit['color']}20; 
                            padding: 1.5rem; 
                            border-radius: 10px; 
                            margin-bottom: 1rem;
                            border-left: 4px solid {benefit['color']};
                            height: 130px;'>
                    <div style='display: flex; align-items: center; margin-bottom: 0.5rem;'>
                        <span style='font-size: 1.8rem; margin-right: 0.5rem;'>{benefit['icon']}</span>
                        <h4 style='color: #333; margin: 0;'>{benefit['title']}</h4>
                    </div>
                    <p style='color: #666; margin: 0; font-size: 0.9rem;'>
                        {benefit['description']}
                    </p>
                </div>
                """, unsafe_allow_html=True)
        
        with col2:
            if i + 1 < len(benefits):
                benefit = benefits[i + 1]
                st.markdown(f"""
                <div style='background: {benefit['color']}20; 
                            padding: 1.5rem; 
                            border-radius: 10px; 
                            margin-bottom: 1rem;
                            border-left: 4px solid {benefit['color']};
                            height: 130px;'>
                    <div style='display: flex; align-items: center; margin-bottom: 0.5rem;'>
                        <span style='font-size: 1.8rem; margin-right: 0.5rem;'>{benefit['icon']}</span>
                        <h4 style='color: #333; margin: 0;'>{benefit['title']}</h4>
                    </div>
                    <p style='color: #666; margin: 0; font-size: 0.9rem;'>
                        {benefit['description']}
                    </p>
                </div>
                """, unsafe_allow_html=True)

def main():
    """
    H√†m ch√≠nh c·ªßa trang Multi-Agent System
    """
    # Hi·ªÉn th·ªã ki·∫øn tr√∫c h·ªá th·ªëng
    display_system_architecture()

    # Hi·ªÉn th·ªã c√°c t√°c nh√¢n
    display_agents()
    
    # Hi·ªÉn th·ªã c√°c th√†nh ph·∫ßn h·ªá th·ªëng
    display_system_components()
    
    # Hi·ªÉn th·ªã quy tr√¨nh ho·∫°t ƒë·ªông
    display_workflow_details()
    
    # Hi·ªÉn th·ªã t√≠nh nƒÉng k·ªπ thu·∫≠t
    display_technical_features()
    
    # Hi·ªÉn th·ªã l·ª£i √≠ch
    display_benefits()
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: 2rem; 
                border-radius: 15px; 
                margin-top: 2rem;'>
        <h3 style='color: white; margin-bottom: 1rem;'>
            üöÄ Tr·∫£i nghi·ªám H·ªá th·ªëng Multi-Agent ngay h√¥m nay!
        </h3>
        <p style='color: #f0f0f0; font-size: 1.1rem; margin-bottom: 0;'>
            H·ªá th·ªëng gia s∆∞ AI th√¥ng minh v·ªõi ki·∫øn tr√∫c ƒëa t√°c nh√¢n ti√™n ti·∫øn, 
            mang ƒë·∫øn tr·∫£i nghi·ªám h·ªçc t·∫≠p c√° nh√¢n h√≥a v√† hi·ªáu qu·∫£ nh·∫•t.
        </p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()