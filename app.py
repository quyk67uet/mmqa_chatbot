import streamlit as st
import pickle
import json
import os
import random
import time
from typing import List, Dict, Any
from streamlit_chat import message
from dotenv import load_dotenv
from supabase import create_client, Client
from datetime import datetime

load_dotenv()

# Haystack imports
from haystack import Pipeline, Document
from haystack.document_stores.in_memory import InMemoryDocumentStore
from haystack.components.retrievers.in_memory import InMemoryBM25Retriever, InMemoryEmbeddingRetriever
from haystack.components.builders import PromptBuilder
from haystack.components.embedders import SentenceTransformersDocumentEmbedder, SentenceTransformersTextEmbedder

# Google AI integration - Custom Component
import google.generativeai as genai
from haystack import component, default_from_dict, default_to_dict

@component
class CustomGoogleAIGenerator:
    """
    M·ªôt component Haystack t√πy ch·ªânh ƒë·ªÉ g·ªçi tr·ª±c ti·∫øp API Gemini c·ªßa Google.
    """
    def __init__(self, api_key: str, model_name: str = "gemini-1.5-pro"):
        self.api_key = api_key
        self.model_name = model_name
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel(self.model_name)

    def to_dict(self):
        return default_to_dict(self, api_key=self.api_key, model_name=self.model_name)

    @classmethod
    def from_dict(cls, data):
        return default_from_dict(cls, data)

    @component.output_types(replies=List[str])
    def run(self, prompt: str):
        try:
            response = self.model.generate_content(prompt)
            return {"replies": [response.text]}
        except Exception as e:
            return {"replies": [f"Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra: {e}"]}

# Thi·∫øt l·∫≠p page config v·ªõi theme hi·ªán ƒë·∫°i
st.set_page_config(
    page_title="AI Math Tutor",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "Gia s∆∞ To√°n AI th√¥ng minh cho h·ªçc sinh l·ªõp 9"
    }
)

# Custom CSS cho giao di·ªán hi·ªán ƒë·∫°i
st.markdown("""
<style>
    /* Hide Streamlit branding */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    /* Main app styling */
    .main {
        padding: 1rem;
    }
    
    /* Chat container */
    .chat-container {
        max-height: 600px;
        overflow-y: auto;
        padding: 1rem;
        border-radius: 15px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        margin-bottom: 1rem;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }
    
    /* User message */
    .user-message {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 12px 16px;
        border-radius: 18px 18px 4px 18px;
        margin: 8px 0;
        margin-left: 20%;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        animation: slideInRight 0.3s ease-out;
    }
    
    /* Bot message */
    .bot-message {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
        padding: 12px 16px;
        border-radius: 18px 18px 18px 4px;
        margin: 8px 0;
        margin-right: 20%;
        box-shadow: 0 4px 12px rgba(240, 147, 251, 0.3);
        animation: slideInLeft 0.3s ease-out;
    }
    
    /* Animations */
    @keyframes slideInRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideInLeft {
        from { transform: translateX(-100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }
    
    /* Typing indicator */
    .typing-indicator {
        display: flex;
        align-items: center;
        padding: 12px 16px;
        background: rgba(255,255,255,0.1);
        border-radius: 18px;
        margin: 8px 0;
        margin-right: 20%;
        animation: pulse 2s infinite;
    }
    
    .typing-dots {
        display: flex;
        gap: 4px;
    }
    
    .typing-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: white;
        animation: typingDots 1.5s infinite;
    }
    
    .typing-dot:nth-child(2) { animation-delay: 0.3s; }
    .typing-dot:nth-child(3) { animation-delay: 0.6s; }
    
    @keyframes typingDots {
        0%, 60%, 100% { opacity: 0.3; }
        30% { opacity: 1; }
    }
    
    /* Sidebar styling */
    .sidebar .sidebar-content {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    /* Input styling */
    .stTextInput > div > div > input {
        border-radius: 25px;
        border: 2px solid #667eea;
        padding: 12px 20px;
        font-size: 16px;
        transition: all 0.3s ease;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #f093fb;
        box-shadow: 0 0 20px rgba(240, 147, 251, 0.3);
    }
    
    /* Button styling */
    .stButton > button {
        border-radius: 25px;
        border: none;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 12px 24px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
    }
    
    /* Welcome message */
    .welcome-message {
        text-align: center;
        padding: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 20px;
        color: white;
        margin: 2rem 0;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }
    
    /* Feature cards */
    .feature-card {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        color: white;
        box-shadow: 0 4px 12px rgba(240, 147, 251, 0.3);
        transition: transform 0.3s ease;
    }
    
    .feature-card:hover {
        transform: translateY(-5px);
    }
    
    /* Status indicators */
    .status-online {
        color: #4ade80;
        font-weight: 600;
    }
    
    .status-thinking {
        color: #fbbf24;
        font-weight: 600;
    }
    
    /* Math expression styling */
    .math-expression {
        background: rgba(255,255,255,0.1);
        padding: 8px 12px;
        border-radius: 8px;
        font-family: 'Courier New', monospace;
        margin: 4px 0;
    }
</style>
""", unsafe_allow_html=True)

# Ki·ªÉm tra API key
if "GOOGLE_API_KEY" not in os.environ:
    st.error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y API key. Vui l√≤ng c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng.")
    st.stop()

query_params = st.query_params
if "healthcheck" in query_params:
    st.write("ok ‚úÖ")
    st.stop()

@st.cache_resource
def load_resources():
    """Load v√† kh·ªüi t·∫°o t·∫•t c·∫£ t√†i nguy√™n c·ªßa h·ªá th·ªëng"""
    
    # Load documents
    try:
        with open("embedded_documents.pkl", "rb") as f:
            documents = pickle.load(f)
    except FileNotFoundError:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu h·ªçc li·ªáu")
        st.stop()
    
    # Load videos
    try:
        with open("videos.json", "r", encoding="utf-8") as f:
            videos_data = json.load(f)
    except FileNotFoundError:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu video")
        st.stop()
    
    # Initialize document store
    document_store = InMemoryDocumentStore()
    document_store.write_documents(documents)
    
    # Initialize components
    retriever = InMemoryEmbeddingRetriever(document_store=document_store)
    text_embedder = SentenceTransformersTextEmbedder(
        model="bkai-foundation-models/vietnamese-bi-encoder"
    )
    
    # Templates
    informer_template = """B·∫°n l√† m·ªôt gia s∆∞ to√°n AI. D·ª±a v√†o l·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y v√† th√¥ng tin t·ª´ s√°ch gi√°o khoa, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa h·ªçc sinh.

--- L·ªäCH S·ª¨ TR√í CHUY·ªÜN G·∫¶N ƒê√ÇY ---
{{ conversation_history }}
---

--- TH√îNG TIN S√ÅCH GI√ÅO KHOA (T·ª™ RAG) ---
{% for doc in documents %}
  {{ doc.content }}
{% endfor %}
---

D·ª±a v√†o c·∫£ hai ngu·ªìn th√¥ng tin tr√™n, h√£y tr·∫£ l·ªùi c√¢u h·ªèi cu·ªëi c√πng c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c v√† ƒë√∫ng ng·ªØ c·∫£nh.

C√¢u h·ªèi cu·ªëi c√πng: {{ query }}

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, gi·∫£i th√≠ch r√µ r√†ng t·ª´ng b∆∞·ªõc:"""

    practice_template = """B·∫°n l√† gia s∆∞ to√°n s√°ng t·∫°o. H·ªçc sinh c·∫ßn luy·ªán t·∫≠p: '{{ student_weakness }}'.

H√£y t·∫°o 2 b√†i t·∫≠p m·ªõi v√† ƒë·ªÅ xu·∫•t 1 video ph√π h·ª£p t·ª´ danh s√°ch:
{{ video_cheatsheet_json }}

Tr·∫£ l·ªùi theo format:
### üéØ B√ÄI T·∫¨P LUY·ªÜN T·∫¨P
1. [B√†i t·∫≠p 1]
2. [B√†i t·∫≠p 2]

### üìπ VIDEO ƒê·ªÄ XU·∫§T
**[T√™n video]**
üé¨ Link: https://www.youtube.com/playlist?list=PL5q2T2FxzK7XY4s9FqDi6KCFEpGr2LX2D"""

    insight_template = """Ph√¢n t√≠ch h·ªôi tho·∫°i v√† tr·∫£ v·ªÅ JSON:

{{ conversation_history }}

Output: {"misunderstood_concepts": ["concept1", "concept2"], "sentiment": "emotion"}"""

    verifier_template = """Ki·ªÉm tra t√≠nh ch√≠nh x√°c c·ªßa l·ªùi gi·∫£i:

C√¢u h·ªèi: {{ query }}
L·ªùi gi·∫£i: {{ informer_answer }}

Output: {"is_correct": true/false, "correction_suggestion": "g·ª£i √Ω n·∫øu sai"}"""

    intent_template = """Ph√¢n lo·∫°i √Ω ƒë·ªãnh t·ª´ h·ªôi tho·∫°i:

{{ conversation_history }}

Ch·ªçn m·ªôt trong: greeting_social, math_question, request_for_practice, expression_of_stress, off_topic"""

    # Create prompt builders
    informer_prompt_builder = PromptBuilder(template=informer_template, required_variables=["documents", "query", "conversation_history"])
    practice_prompt_builder = PromptBuilder(template=practice_template, required_variables=["student_weakness", "video_cheatsheet_json"])
    insight_prompt_builder = PromptBuilder(template=insight_template, required_variables=["conversation_history"])
    verifier_prompt_builder = PromptBuilder(template=verifier_template, required_variables=["query", "informer_answer"])
    intent_prompt_builder = PromptBuilder(template=intent_template, required_variables=["conversation_history"])
    
    # Create generator
    generator = CustomGoogleAIGenerator(api_key=os.getenv("GOOGLE_API_KEY"))
    
    # Create RAG pipeline
    informer_pipeline = Pipeline()
    informer_pipeline.add_component("text_embedder", text_embedder)
    informer_pipeline.add_component("retriever", retriever)
    informer_pipeline.add_component("prompt_builder", informer_prompt_builder)
    informer_pipeline.add_component("generator", generator)
    
    # Connect components
    informer_pipeline.connect("text_embedder.embedding", "retriever.query_embedding")
    informer_pipeline.connect("retriever.documents", "prompt_builder.documents")
    informer_pipeline.connect("prompt_builder.prompt", "generator.prompt")
    
    return {
        "informer_pipeline": informer_pipeline,
        "generator": generator,
        "practice_prompt_builder": practice_prompt_builder,
        "insight_prompt_builder": insight_prompt_builder,
        "verifier_prompt_builder": verifier_prompt_builder,
        "intent_prompt_builder": intent_prompt_builder,
        "videos_data": videos_data,
        "document_store": document_store
    }

def classify_intent(conversation_history: str, resources: Dict) -> str:
    """Ph√¢n lo·∫°i √Ω ƒë·ªãnh ng∆∞·ªùi d√πng"""
    try:
        # C·∫£i thi·ªán prompt ƒë·ªÉ ph√¢n lo·∫°i ch√≠nh x√°c h∆°n
        improved_intent_template = """Ph√¢n lo·∫°i √Ω ƒë·ªãnh t·ª´ h·ªôi tho·∫°i sau:

{{ conversation_history }}

Ph√¢n lo·∫°i th√†nh m·ªôt trong c√°c lo·∫°i sau:
- 'greeting_social': Ch√†o h·ªèi, x√£ giao, c·∫£m ∆°n, t·∫°m bi·ªát
- 'math_question': C√¢u h·ªèi v·ªÅ to√°n h·ªçc, y√™u c·∫ßu gi·∫£i b√†i t·∫≠p, t√≠nh to√°n
- 'request_for_practice': Y√™u c·∫ßu b√†i t·∫≠p luy·ªán t·∫≠p, mu·ªën th·ª±c h√†nh
- 'expression_of_stress': Bi·ªÉu hi·ªán cƒÉng th·∫≥ng, m·ªát m·ªèi, n·∫£n l√≤ng
- 'off_topic': Ch·ªß ƒë·ªÅ ho√†n to√†n kh√¥ng li√™n quan ƒë·∫øn h·ªçc t·∫≠p

Ch·ªâ tr·∫£ v·ªÅ M·ªòT t·ª´ duy nh·∫•t t·ª´ danh s√°ch tr√™n:"""

        # T·∫°o prompt builder m·ªõi v·ªõi template c·∫£i thi·ªán
        intent_prompt_builder = PromptBuilder(
            template=improved_intent_template, 
            required_variables=["conversation_history"]
        )
        
        prompt = intent_prompt_builder.run(conversation_history=conversation_history)
        result = resources["generator"].run(prompt=prompt["prompt"])
        intent = result["replies"][0].strip().lower()
        
        # Debug: In ra intent ƒë·ªÉ ki·ªÉm tra
        print(f"DEBUG - User input: {conversation_history.split('User: ')[-1] if 'User: ' in conversation_history else 'N/A'}")
        print(f"DEBUG - Classified intent: {intent}")
        
        valid_intents = ['greeting_social', 'math_question', 'request_for_practice', 'expression_of_stress', 'off_topic']
        
        # N·∫øu intent kh√¥ng h·ª£p l·ªá, th·ª≠ ph√¢n lo·∫°i th·ªß c√¥ng
        if intent not in valid_intents:
            # Ki·ªÉm tra t·ª´ kh√≥a to√°n h·ªçc
            math_keywords = ['gi·∫£i', 't√≠nh', 'ph∆∞∆°ng tr√¨nh', 'b√†i t·∫≠p', 'to√°n', 'x√°c su·∫•t', 'th·ªëng k√™', 'h√¨nh h·ªçc', 'ƒë·∫°i s·ªë']
            user_input = conversation_history.split('User: ')[-1] if 'User: ' in conversation_history else ''
            
            if any(keyword in user_input.lower() for keyword in math_keywords):
                intent = 'math_question'
            else:
                intent = 'greeting_social'
        
        return intent
    except Exception as e:
        print(f"DEBUG - Intent classification error: {e}")
        return 'greeting_social'

def informer_agent(query: str, conversation_history: str, resources: Dict) -> str:
    """Agent gi·∫£i to√°n d·ª±a tr√™n RAG"""
    try:
        result = resources["informer_pipeline"].run({
            "text_embedder": {"text": query},
            "prompt_builder": {"query": query, "conversation_history": conversation_history}
        })
        return result["generator"]["replies"][0]
    except:
        return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ gi·∫£i b√†i n√†y l√∫c n√†y."

def verifier_agent(query: str, informer_answer: str, resources: Dict) -> Dict:
    """Agent ki·ªÉm tra t√≠nh ƒë√∫ng ƒë·∫Øn"""
    try:
        prompt = resources["verifier_prompt_builder"].run(query=query, informer_answer=informer_answer)
        result = resources["generator"].run(prompt=prompt["prompt"])
        return json.loads(result["replies"][0])
    except:
        return {"is_correct": True, "correction_suggestion": ""}

def insight_agent(conversation_history: str, resources: Dict) -> Dict:
    """Agent ph√¢n t√≠ch ƒëi·ªÉm y·∫øu"""
    try:
        prompt = resources["insight_prompt_builder"].run(conversation_history=conversation_history)
        result = resources["generator"].run(prompt=prompt["prompt"])
        return json.loads(result["replies"][0])
    except:
        return {"misunderstood_concepts": [], "sentiment": "neutral"}

def practice_agent(student_weakness: str, resources: Dict) -> str:
    """Agent t·∫°o b√†i t·∫≠p"""
    try:
        video_cheatsheet = []
        for video in resources["videos_data"]:
            video_cheatsheet.append({
                "title": video["title"],
                "keywords": video["keywords"],
                "summary": video["summary_for_llm"]
            })
        
        video_json = json.dumps(video_cheatsheet, ensure_ascii=False)
        prompt = resources["practice_prompt_builder"].run(
            student_weakness=student_weakness,
            video_cheatsheet_json=video_json
        )
        result = resources["generator"].run(prompt=prompt["prompt"])
        return result["replies"][0]
    except:
        return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o b√†i t·∫≠p l√∫c n√†y."

def problem_solving_engine(query: str, conversation_history: str, resources: Dict) -> str:
    """
    ƒê√¢y l√† "c·ªó m√°y" con, k·∫øt h·ª£p Informer v√† Verifier.
    N√≥ nh·∫≠n m·ªôt c√¢u h·ªèi v√† tr·∫£ v·ªÅ m·ªôt c√¢u tr·∫£ l·ªùi cu·ªëi c√πng ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c.
    """
    print("DEBUG: Problem-Solving Engine activated.")
    
    # 1. Informer Agent t·∫°o ra b·∫£n nh√°p
    informer_answer = informer_agent(query, conversation_history, resources) 
    
    # 2. Verifier Agent ki·ªÉm tra b·∫£n nh√°p ƒë√≥
    verification = verifier_agent(query, informer_answer, resources)
    
    # 3. Tr·∫£ v·ªÅ k·∫øt qu·∫£ cu·ªëi c√πng d·ª±a tr√™n s·ª± x√°c th·ª±c
    if verification.get("is_correct", True): # M·∫∑c ƒë·ªãnh l√† True n·∫øu c√≥ l·ªói
        return informer_answer
    else:
        correction = verification.get("correction_suggestion", "")
        # T·∫°o m·ªôt c√¢u tr·∫£ l·ªùi an to√†n, th·ª´a nh·∫≠n s·ª± kh√¥ng ch·∫Øc ch·∫Øn
        return f"üîç T√¥i ƒë√£ xem x√©t l·∫°i v√† th·∫•y c√≥ m·ªôt ch√∫t ch∆∞a ch√≠nh x√°c. {correction} T√¥i s·∫Ω c·∫ßn t√¨m hi·ªÉu th√™m v·ªÅ v·∫•n ƒë·ªÅ n√†y ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi t·ªët h∆°n."


def tutor_agent_response(user_input: str, conversation_history: List, resources: Dict, supabase: Client, user_id: str, display_name: str) -> str:
    """Agent ch√≠nh ƒëi·ªÅu ph·ªëi c√°c agent kh√°c"""
    
    # T·∫°o l·ªãch s·ª≠ ƒë·ªÉ ph√¢n t√≠ch
    history_str = "\n".join([f"{'User' if i%2==0 else 'Bot'}: {msg}" 
                            for i, msg in enumerate(conversation_history[-10:])])
    history_str += f"\nUser: {user_input}"
    
    # Ph√¢n lo·∫°i √Ω ƒë·ªãnh
    intent = classify_intent(history_str, resources)
    
    # X·ª≠ l√Ω theo √Ω ƒë·ªãnh
    if intent == "greeting_social":
        responses = [
            "Xin ch√†o! T√¥i l√† gia s∆∞ AI c·ªßa b·∫°n üòä H√¥m nay ch√∫ng ta h·ªçc g√¨ nh√©?",
            "Ch√†o b·∫°n! T√¥i s·∫µn s√†ng gi√∫p b·∫°n gi·∫£i to√°n üìö C√≥ c√¢u h·ªèi g√¨ kh√¥ng?",
            "Hi! C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng t√¥i üí™ B·∫Øt ƒë·∫ßu th√¥i!",
            "Ch√†o b·∫°n th√¢n m·∫øn! To√°n h·ªçc th√∫ v·ªã l·∫Øm ƒë√≥ ‚ú® H√£y h·ªèi t√¥i nh√©!"
        ]
        return random.choice(responses)
    
    elif intent == "math_question":
        print("DEBUG: Tutor Agent is calling the Problem-Solving Engine.")
        return problem_solving_engine(user_input, conversation_history, resources)
    
    elif intent == "request_for_practice":
        # T·∫°o b√†i t·∫≠p
        insights = insight_agent(history_str, resources)
        
        if insights["misunderstood_concepts"]:
            weakness = insights["misunderstood_concepts"][0]
            practice_response = practice_agent(weakness, resources)
            return f"üéØ T√¥i th·∫•y b·∫°n c·∫ßn luy·ªán t·∫≠p **{weakness}**:\n\n{practice_response}"
        else:
            practice_response = practice_agent("ph∆∞∆°ng tr√¨nh b·∫≠c nh·∫•t", resources)
            return f"üìù **B√†i t·∫≠p luy·ªán t·∫≠p:**\n\n{practice_response}"
    
    elif intent == "expression_of_stress":
        stress_responses = [
            "T√¥i hi·ªÉu c·∫£m gi√°c c·ªßa b·∫°n üòä H√£y ngh·ªâ ng∆°i 5 ph√∫t r·ªìi quay l·∫°i nh√©!",
            "ƒê·ª´ng lo l·∫Øng! To√°n h·ªçc c·∫ßn th·ªùi gian üí™ Ch√∫ng ta t·ª´ t·ª´ th√¥i!",
            "Th·ªü s√¢u nh√©! M·ªçi v·∫•n ƒë·ªÅ ƒë·ªÅu c√≥ l·ªùi gi·∫£i üåü T√¥i s·∫Ω gi√∫p b·∫°n!"
        ]
        return random.choice(stress_responses)
    
    else:  # off_topic
        return """ü§ñ **T√¥i chuy√™n v·ªÅ To√°n h·ªçc:**

üìê Gi·∫£i b√†i t·∫≠p l·ªõp 9
üìù T·∫°o b√†i luy·ªán t·∫≠p  
üé• ƒê·ªÅ xu·∫•t video h·ªçc
üí™ H·ªó tr·ª£ tinh th·∫ßn

B·∫°n c√≥ c√¢u h·ªèi To√°n n√†o kh√¥ng? üòä"""

def init_supabase_client():
    """Kh·ªüi t·∫°o Supabase client"""
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_KEY")
    
    if not supabase_url or not supabase_key:
        st.error("‚ùå Thi·∫øu th√¥ng tin Supabase. Vui l√≤ng c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng.")
        st.stop()
    
    return create_client(supabase_url, supabase_key)

def render_chat_message(message: str, is_user: bool, key: str):
    """Render tin nh·∫Øn chat v·ªõi animation"""
    css_class = "user-message" if is_user else "bot-message"
    st.markdown(f'<div class="{css_class}">{message}</div>', unsafe_allow_html=True)

def should_trigger_proactive_practice(conversation_history: List) -> bool:
    """
    Ki·ªÉm tra xem c√≥ n√™n k√≠ch ho·∫°t lu·ªìng luy·ªán t·∫≠p ch·ªß ƒë·ªông kh√¥ng
    (sau m·ªói 3-4 l∆∞·ª£t chat v·ªÅ to√°n)
    """
    if len(conversation_history) < 6:  # √çt nh·∫•t 3 l∆∞·ª£t h·ªèi ƒë√°p
        return False
    
    # ƒê·∫øm s·ªë l∆∞·ª£t chat v·ªÅ to√°n trong 8 tin nh·∫Øn g·∫ßn nh·∫•t
    recent_messages = conversation_history[-8:]
    math_count = 0
    
    for i in range(0, len(recent_messages), 2):  # Ch·ªâ ƒë·∫øm tin nh·∫Øn c·ªßa user
        if i < len(recent_messages):
            # ƒê∆°n gi·∫£n h√≥a: gi·∫£ s·ª≠ tin nh·∫Øn ch·ª©a s·ªë ho·∫∑c d·∫•u = l√† c√¢u h·ªèi to√°n
            user_msg = recent_messages[i]
            if any(char in user_msg for char in "0123456789=+-*/()"):
                math_count += 1
    
    return math_count >= 3


def show_typing_indicator():
    """Hi·ªÉn th·ªã indicator khi bot ƒëang suy nghƒ©"""
    return st.markdown('''
        <div class="typing-indicator">
            <span style="margin-right: 10px;">ü§ñ ƒêang suy nghƒ© ...</span>
            <div class="typing-dots">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        </div>
    ''', unsafe_allow_html=True)

def handle_modern_auth(supabase: Client):
    """X·ª≠ l√Ω authentication v·ªõi UI hi·ªán ƒë·∫°i"""
    
    # Ki·ªÉm tra session
    try:
        session = supabase.auth.get_session()
        if session and session.user and session.user.email_confirmed_at:
            if "user" not in st.session_state:
                st.session_state.user = session.user
    except:
        if "user" in st.session_state:
            del st.session_state.user
    
    # N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
    if "user" not in st.session_state or st.session_state.user is None:
        
        # Welcome message
        st.markdown('''
            <div class="welcome-message">
                <h1>ü§ñ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Gia s∆∞ AI</h1>
                <p style="font-size: 1.2em; margin: 1rem 0;">
                    H·ªá th·ªëng gia s∆∞ To√°n th√¥ng minh v·ªõi 5 AI Agent chuy√™n nghi·ªáp
                </p>
                <p style="opacity: 0.9;">
                    ƒêƒÉng nh·∫≠p ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh h·ªçc t·∫≠p c√° nh√¢n h√≥a
                </p>
            </div>
        ''', unsafe_allow_html=True)
        
        # Auth tabs
        tab1, tab2 = st.tabs(["üîë ƒêƒÉng nh·∫≠p", "üìù ƒêƒÉng k√Ω"])
        
        with tab1:
            with st.form("login_form"):
                st.subheader("ƒêƒÉng nh·∫≠p t√†i kho·∫£n")
                email = st.text_input("üìß Email", placeholder="example@email.com")
                password = st.text_input("üîí M·∫≠t kh·∫©u", type="password")
                login_btn = st.form_submit_button("ƒêƒÉng nh·∫≠p", use_container_width=True)
                
                if login_btn:
                    if email and password:
                        try:
                            response = supabase.auth.sign_in_with_password({"email": email, "password": password})
                            if response.user and response.user.email_confirmed_at:
                                st.session_state.user = response.user
                                st.success("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                                time.sleep(1)
                                st.rerun()
                            else:
                                st.warning("‚ö†Ô∏è Vui l√≤ng x√°c th·ª±c email tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p!")
                        except Exception as e:
                            if "invalid login credentials" in str(e).lower():
                                st.error("‚ùå Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng")
                            else:
                                st.error(f"‚ùå L·ªói ƒëƒÉng nh·∫≠p: {str(e)}")
                    else:
                        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin")
        
        with tab2:
            with st.form("register_form"):
                st.subheader("T·∫°o t√†i kho·∫£n m·ªõi")
                display_name = st.text_input("üë§ T√™n c·ªßa b·∫°n", placeholder="Nguy·ªÖn VƒÉn A")
                new_email = st.text_input("üìß Email", placeholder="example@email.com")
                new_password = st.text_input("üîí M·∫≠t kh·∫©u", type="password")
                register_btn = st.form_submit_button("ƒêƒÉng k√Ω", use_container_width=True)
                
                if register_btn:
                    if display_name and new_email and new_password:
                        try:
                            # --- THAY ƒê·ªîI 3: G·ª¨I K√àM T√äN TRONG OPTIONS ---
                            response = supabase.auth.sign_up({
                                "email": new_email, 
                                "password": new_password,
                                "options": {
                                    "data": {
                                        "display_name": display_name
                                    }
                                }
                            })
                            if response.user:
                                st.success("üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!")
                                st.info("üìß Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n")
                        except Exception as e:
                            if "already registered" in str(e).lower():
                                st.error("‚ùå Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω")
                            else:
                                st.error(f"‚ùå L·ªói ƒëƒÉng k√Ω: {str(e)}")
                    else:
                        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß T√™n, Email v√† M·∫≠t kh·∫©u")
        
        # Feature showcase
        st.subheader("üöÄ T√≠nh nƒÉng n·ªïi b·∫≠t")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown('''
                <div class="feature-card">
                    <h3>üß† 5 AI Agent th√¥ng minh</h3>
                    <p>H·ªá th·ªëng ƒëa t√°c nh√¢n chuy√™n nghi·ªáp cho tr·∫£i nghi·ªám h·ªçc t·∫≠p t·ªëi ∆∞u</p>
                </div>
            ''', unsafe_allow_html=True)
            
            st.markdown('''
                <div class="feature-card">
                    <h3>üìö D·ª±a tr√™n SGK ch√≠nh th·ª©c</h3>
                    <p>N·ªôi dung chu·∫©n theo ch∆∞∆°ng tr√¨nh To√°n l·ªõp 9</p>
                </div>
            ''', unsafe_allow_html=True)
        
        with col2:
            st.markdown('''
                <div class="feature-card">
                    <h3>üéØ H·ªçc t·∫≠p c√° nh√¢n h√≥a</h3>
                    <p>Ph√¢n t√≠ch ƒëi·ªÉm y·∫øu v√† ƒë·ªÅ xu·∫•t b√†i t·∫≠p ph√π h·ª£p</p>
                </div>
            ''', unsafe_allow_html=True)
            
            st.markdown('''
                <div class="feature-card">
                    <h3>üé• Video b√†i gi·∫£ng</h3>
                    <p>Kho video phong ph√∫ v·ªõi l·ªùi gi·∫£i chi ti·∫øt</p>
                </div>
            ''', unsafe_allow_html=True)
        
        return False
    
    return True

def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    
    # Kh·ªüi t·∫°o Supabase
    supabase = init_supabase_client()
    
    # Ki·ªÉm tra v√† x·ª≠ l√Ω authentication
    # H√†m n√†y s·∫Ω hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω v√† d·ª´ng app n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
    if not handle_modern_auth(supabase):
        return
    
    # N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, l·∫•y th√¥ng tin user
    user = st.session_state.user
    user_id = user.id

    display_name = user.user_metadata.get("display_name", user.email)
    
    # Load resources (ch·ªâ ch·∫°y khi ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng)
    with st.spinner("üöÄ ƒêang kh·ªüi t·∫°o h·ªá th·ªëng AI..."):
        resources = load_resources()
    
    # --- Giao di·ªán ch√≠nh sau khi ƒëƒÉng nh·∫≠p ---
    
    # Header
    st.markdown(f'''
        <div style="text-align: center; padding: 1rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; margin-bottom: 1rem; color: white; box-shadow: 0 8px 32px rgba(0,0,0,0.1);">
            <h1>ü§ñ Gia s∆∞ To√°n AI</h1>
            <p class="status-online">‚óè Online - S·∫µn s√†ng h·ªó tr·ª£ {display_name}</p>
        </div>
    ''', unsafe_allow_html=True)
    
    # Kh·ªüi t·∫°o session state cho cu·ªôc tr√≤ chuy·ªán
    if "messages" not in st.session_state:
        st.session_state.messages = []
        # Th√™m tin nh·∫Øn ch√†o m·ª´ng ƒë·∫ßu ti√™n
        welcome_msg = "Xin ch√†o! T√¥i l√† gia s∆∞ AI c·ªßa b·∫°n üòä. H√¥m nay ch√∫ng ta c√πng h·ªçc To√°n nh√©!"
        st.session_state.messages.append({"role": "assistant", "content": welcome_msg, "intent": "greeting_social"})

    # Container ƒë·ªÉ ch·ª©a c√°c tin nh·∫Øn chat
    chat_placeholder = st.container()
    with chat_placeholder:
        for i, msg_data in enumerate(st.session_state.messages):
            is_user = msg_data["role"] == "user"
            # S·ª≠ d·ª•ng h√†m render t√πy ch·ªânh
            render_chat_message(msg_data["content"], is_user, key=f"msg_{i}")

    # Input c·ªßa ng∆∞·ªùi d√πng ƒë∆∞·ª£c ƒë·∫∑t ·ªü d∆∞·ªõi c√πng
    if user_input := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        # Th√™m v√† hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
        st.session_state.messages.append({"role": "user", "content": user_input, "intent": "unknown"})
        with chat_placeholder:
             render_chat_message(user_input, is_user=True, key=f"user_{len(st.session_state.messages)}")
        
        # Hi·ªÉn th·ªã indicator "ƒëang suy nghƒ©"
        with chat_placeholder:
            typing_indicator_placeholder = show_typing_indicator()
        
        # X·ª≠ l√Ω b·∫±ng Tutor Agent
        bot_response = tutor_agent_response(
            user_input, 
            [msg["content"] for msg in st.session_state.messages], 
            resources, 
            supabase, 
            user_id,
            display_name=display_name
        )
        
        # X√≥a indicator v√† th√™m ph·∫£n h·ªìi c·ªßa bot
        typing_indicator_placeholder.empty()
        st.session_state.messages.append({"role": "assistant", "content": bot_response})
        with chat_placeholder:
            render_chat_message(bot_response, is_user=False, key=f"bot_{len(st.session_state.messages)}")

        # Ki·ªÉm tra lu·ªìng luy·ªán t·∫≠p ch·ªß ƒë·ªông
        if should_trigger_proactive_practice([msg["content"] for msg in st.session_state.messages]):
            with chat_placeholder:
                proactive_typing_placeholder = show_typing_indicator()
            
            # L·∫•y h·ªì s∆° ng∆∞·ªùi d√πng ƒë·ªÉ ƒë·ªÅ xu·∫•t b√†i t·∫≠p
            try:
                history_str = "\n".join([f"{msg['role']}: {msg['content']}" for msg in st.session_state.messages[-10:]])
                insights = insight_agent(history_str, resources)
                
                if insights and insights.get("misunderstood_concepts"):
                    weakness = insights["misunderstood_concepts"][0]
                    practice_response = practice_agent(weakness, resources)
                    proactive_msg = f"üí° **T√¥i nh·∫≠n th·∫•y b·∫°n c√≥ th·ªÉ c·∫ßn luy·ªán t·∫≠p th√™m v·ªÅ *{weakness}*. ƒê√¢y l√† m·ªôt s·ªë g·ª£i √Ω:**\n\n{practice_response}"
                    
                    proactive_typing_placeholder.empty()
                    st.session_state.messages.append({"role": "assistant", "content": proactive_msg})
                    with chat_placeholder:
                        render_chat_message(proactive_msg, is_user=False, key=f"proactive_{len(st.session_state.messages)}")
                else:
                    proactive_typing_placeholder.empty() # X√≥a indicator n·∫øu kh√¥ng c√≥ g√¨ ƒë·ªÉ ƒë·ªÅ xu·∫•t
            except Exception as e:
                proactive_typing_placeholder.empty()
                st.warning(f"Kh√¥ng th·ªÉ t·∫°o ƒë·ªÅ xu·∫•t ch·ªß ƒë·ªông: {str(e)}")
        
        # Rerun ƒë·ªÉ cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
        st.rerun()

    # Sidebar v·ªõi th√¥ng tin khi ƒë√£ ƒëƒÉng nh·∫≠p
    with st.sidebar:
        st.header(f"üë§ Ch√†o, {display_name}")
        st.caption(f"Email: {user.email}")
        
        if st.button("ƒêƒÉng xu·∫•t", use_container_width=True):
            supabase.auth.sign_out()
            # X√≥a c√°c session state li√™n quan ƒë·∫øn user
            keys_to_delete = ["user", "messages"]
            for key in keys_to_delete:
                if key in st.session_state:
                    del st.session_state[key]
            st.success("‚úÖ ƒê√£ ƒëƒÉng xu·∫•t!")
            time.sleep(1)
            st.rerun()
        
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat", use_container_width=True):
            st.session_state.messages = []
            st.rerun()

if __name__ == "__main__":
    main()